#compdef garbage

autoload -U is-at-least

_garbage() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
":: :_garbage_commands" \
"*::: :->garbage" \
&& ret=0
    case $state in
    (garbage)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:garbage-command-$line[1]:"
        case $line[1] in
            (empty)
_arguments "${_arguments_options[@]}" \
'--days=[Delete all files older than (this number) of integer days. Removes everything if this option is not specified]:DAYS: ' \
'--trash-dir=[The path to the trash directory to empty. By default, this is your home directory'\''s trash (\$XDG_DATA_HOME/Trash)]:TRASH_DIR:_files -/' \
'--dry[Only list the files that are to be deleted, without actually deleting anything]' \
'-a[Delete all files in the trash (by default, only files in the current directory are listed)]' \
'--all[Delete all files in the trash (by default, only files in the current directory are listed)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
'--trash-dir=[The path to the trash directory to list. By default, this is your home directory'\''s trash (\$XDG_DATA_HOME/Trash)]:TRASH_DIR:_files -/' \
'-a[List all files in the trash (by default, only files in the current directory are listed)]' \
'--all[List all files in the trash (by default, only files in the current directory are listed)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(put)
_arguments "${_arguments_options[@]}" \
'--trash-dir=[Put all the trashed files into this trash directory regardless of what filesystem is on]:TRASH_DIR:_files -/' \
'--dry[Don'\''t actually move anything, just print the files to be removed]' \
'-i[Prompt before every removal]' \
'--prompt[Prompt before every removal]' \
'-r[Trashes directories recursively (ignored)]' \
'--recursive[Trashes directories recursively (ignored)]' \
'-f[Suppress prompts/messages]' \
'--force[Suppress prompts/messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'*::paths -- The target path to be trashed:_files' \
&& ret=0
;;
(restore)
_arguments "${_arguments_options[@]}" \
'--trash-dir=[The path to the trash directory to restore from. By default, this is your home directory'\''s trash (\$XDG_DATA_HOME/Trash)]:TRASH_DIR:_files -/' \
'-a[List all files in the trash (by default, only files in the current directory are listed)]' \
'--all[List all files in the trash (by default, only files in the current directory are listed)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(generate-completions)
_arguments "${_arguments_options[@]}" \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':shell_type -- The type of shell:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_garbage__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:garbage-help-command-$line[1]:"
        case $line[1] in
            (empty)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(put)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(restore)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(generate-completions)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_garbage_commands] )) ||
_garbage_commands() {
    local commands; commands=(
'empty:Empty a trash directory' \
'list:List the contents of a trash directory' \
'put:Puts files into the trash. (also '\''garbage rm'\'')' \
'restore:Restores files from the trash' \
'generate-completions:Generate a completion script to stdout' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'garbage commands' commands "$@"
}
(( $+functions[_garbage__empty_commands] )) ||
_garbage__empty_commands() {
    local commands; commands=()
    _describe -t commands 'garbage empty commands' commands "$@"
}
(( $+functions[_garbage__help__empty_commands] )) ||
_garbage__help__empty_commands() {
    local commands; commands=()
    _describe -t commands 'garbage help empty commands' commands "$@"
}
(( $+functions[_garbage__generate-completions_commands] )) ||
_garbage__generate-completions_commands() {
    local commands; commands=()
    _describe -t commands 'garbage generate-completions commands' commands "$@"
}
(( $+functions[_garbage__help__generate-completions_commands] )) ||
_garbage__help__generate-completions_commands() {
    local commands; commands=()
    _describe -t commands 'garbage help generate-completions commands' commands "$@"
}
(( $+functions[_garbage__help_commands] )) ||
_garbage__help_commands() {
    local commands; commands=(
'empty:Empty a trash directory' \
'list:List the contents of a trash directory' \
'put:Puts files into the trash. (also '\''garbage rm'\'')' \
'restore:Restores files from the trash' \
'generate-completions:Generate a completion script to stdout' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'garbage help commands' commands "$@"
}
(( $+functions[_garbage__help__help_commands] )) ||
_garbage__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'garbage help help commands' commands "$@"
}
(( $+functions[_garbage__help__list_commands] )) ||
_garbage__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'garbage help list commands' commands "$@"
}
(( $+functions[_garbage__list_commands] )) ||
_garbage__list_commands() {
    local commands; commands=()
    _describe -t commands 'garbage list commands' commands "$@"
}
(( $+functions[_garbage__help__put_commands] )) ||
_garbage__help__put_commands() {
    local commands; commands=()
    _describe -t commands 'garbage help put commands' commands "$@"
}
(( $+functions[_garbage__put_commands] )) ||
_garbage__put_commands() {
    local commands; commands=()
    _describe -t commands 'garbage put commands' commands "$@"
}
(( $+functions[_garbage__help__restore_commands] )) ||
_garbage__help__restore_commands() {
    local commands; commands=()
    _describe -t commands 'garbage help restore commands' commands "$@"
}
(( $+functions[_garbage__restore_commands] )) ||
_garbage__restore_commands() {
    local commands; commands=()
    _describe -t commands 'garbage restore commands' commands "$@"
}

if [ "$funcstack[1]" = "_garbage" ]; then
    _garbage "$@"
else
    compdef _garbage garbage
fi
