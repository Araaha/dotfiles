set ratios 1:3:2
set shell zsh
set icons true
set previewer ~/.config/lf/preview.sh
set cleaner ~/.config/lf/cleaner.sh
set preview true
set cursorpreviewfmt "\033[7;1m"

set hidden 
set ignorecase 
set incsearch 

set reverse
set findlen 0
set noanchorfind

set info size
set sortby ctime
# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'
set shellflag '-c'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map e $$f
map E !$f

map o :open $fx



# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $(echo "$fx");;
        image/*) 
           nsxiv -g 800x600+560+240 -b -a -sf $(echo "$fx") & disown;;  
        video/*)
           mpv $(echo "$fx") > /dev/null 2> /dev/null & disown;;
        application/octet-stream) $EDITOR $fx;;
        application/json) $EDITOR $fx;;
        application/javascript) $EDITOR $fx;;
        application/x-executable) lf -remote "send $id echo Binary";;
        application/x-pie-executable) lf -remote "send $id echo Binary";;
        application/x-object) lf -remote "send $id echo Binary";;
        inode/x-empty) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
    lf -remote 'send unselect'
}}


map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar -xjvf $f;;
        *.tar.gz|*.tgz) tar -xzvf $f;;
        *.tar.xz|*.txz) tar -xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd fzf_jump ${{
    res="$(rg --color=never --files --hidden --follow --no-messages --no-ignore | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else 
        cmd="select"                                                       
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd find_fzf ${{
    res="$(rg --color=never --files --hidden --follow --no-messages ~/| fzf --reverse)"
    nvim $res
}}

map f
map fi find
map fd :find_fzf
map <c-t> :fzf_jump

map <c-s> $$SHELL
map c

map ?
map n
map n search-next
map N
map N search-prev

map q quit
map ZQ quit
map / search



cmd garbage ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    garbage put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

map X garbage

map m

cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}
map mk push :mkdir<space>

map to push %touch<space>

cmd parent-dir ${{
    set -f
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}
cmd open-with $"$@" $fx
map <c-o> push :open-with<space>

cmd garbage_clear ${{
  garbage empty --all  
}}

cmd garbage_restore ${{
  garbage restore
}}

map sd garbage_clear
map sf garbage_restore


cmd decompress %ouch decompress "$fx" 
cmd compress %ouch compress "$fx" "$fx"."$@"

map unselect
map <enter>
map <enter> open 

map cmd-delete-unix-word
cmap <backspace> cmd-delete-unix-word 



cmd chmod ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    chmod $@ "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
  lf -remote 'send reload'; lf -remote 'send unselect'
}}

map ch :chmod +x

cmd copy-path ${{
  echo -n $f | xclip -sel clipboard | lf -remote "send echo $f"
}}

map cp copy-path
map <tab> :toggle; down 
map <backtab> :toggle; up
cmap <tab> cmd-menu-complete
cmap <backtab> cmd-menu-complete-back
cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --follow --column --no-messages --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf-tmux -p 60%,80%  --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

map <f-2> $printf '%s\n' $fx | edir 

map cl :clear; unselect

map cd :push ''

cmd on-cd &{{
    zoxide add "$PWD"
}}
on-cd

# and fzf integration
cmd fzf_z ${{
    sel="$(zoxide query -l | fzf --reverse  +s)"
    [ -d "$sel" ] && lf -remote "send $id cd \"$sel\""
}}

map <a-c> :fzf_z

cmap <up> cmd-history-prev
cmap <down> cmd-history-next


cmd link %{{
    set -- $(cat ~/dotfiles-private/.local/share/lf/files)
    mode="copy"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # # while a move mode is indicating a hard link
        # move) ln -t . -- "$@";;s
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd delete2 %{{
    delete
    lf -remote 'send reload'
}}

map P :link

map r
map rm delete2
map t
# map T tag-toggle

map i
map i $bat --paging=always "$f"
map <a-T> read

map <c-l> redraw
map gD :cd ~/Downloads
map gl :cd ~/.local/share
map gc :cd ~/.config
map gs :cd ~/Screenshots/
map gd :cd ~/dotfiles/
map gt :cd /tmp/
map gT :cd ~/.local/share/Trash/files/
map gb :cd ~/Books
map <c-c> cmd-escape
map <esc> cmd-escape

cmd ff %{{
    IFS=" "
    ff -- "$*"
    lf -remote "send $id select \"$*\""
}}
map ff push :ff<space>

cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

map R edit-config
