global
function math(context) {
    return context.scopes.some(s => s.startsWith("string.other.math"));
}
function text(context) {
    return context.scopes.some(s => s.startsWith("source.typst"));
}
endglobal

snippet `([a-zA-Z]),([0-9]+),` "underset" A
``if ( m[2].length == 1 ) { a = '_{'; b = '} '; }
  else { a = '_{'; b = '} '; }
  rv = m[1] + a + m[2] + b``
endsnippet

context math(context)
snippet su iA
sum_($1)^($2) $0
endsnippet

context math(context)
snippet int iA
integral_($1)^($2) $3 dif ${4:x} $0
endsnippet

context math(context)
snippet pro iA
product_($1)^($2) $0
endsnippet

# snippet -= wA
# &=
# $0
# endsnippet

# snippet =- wA
# &=
# $0
# endsnippet

context text(context)
snippet newp wA
#pagebreak()

$0
endsnippet

# snippet == iA
# \\\&=
# $0
# endsnippet

# snippet << iA
# \\\&<
# $0
# endsnippet

# snippet >> iA
# \\\&>
# $0
# endsnippet

# snippet ge iA
# \\\&\geq
# $0
# endsnippet

# snippet gne iA
# &\geq
# $0
# endsnippet

# snippet le iA
# \\\&\leq
# $0
# endsnippet

# snippet lne iA
# &\leq
# $0
# endsnippet

context math(context)
snippet fr iA
frac($1, $2) $0
endsnippet

context math(context)
snippet iff iA
<=> $0
endsnippet

context math(context)
snippet imp iA
=> $0
endsnippet

context math(context)
snippet exp iA
 exp $0
endsnippet

context math(context)
snippet log iA
 log $0
endsnippet

context math(context)
snippet ln iA
 ln $0
endsnippet

context math(context)
snippet sin iA
 sin $0
endsnippet

context math(context)
snippet cos iA
 cos $0
endsnippet

context math(context)
snippet tan iA
 tan $0
endsnippet

context math(context)
snippet sec iA
 sec $0
endsnippet

context math(context)
snippet ord iA
 frac(dif, dif $1) 
endsnippet

context math(context)
snippet pdx "d{V}/d{Y}" iA
\frac{\partial $1} {\partial ${2:x }} $0
endsnippet

context math(context)
snippet sbs iA
subset.eq $0
endsnippet

context math(context)
snippet inf iA
infinity
endsnippet


context math(context)
snippet bnm iA
\binom{$1}{$2}$0
endsnippet

context math(context)
snippet flr iA
floor($1)$0
endsnippet

context math(context)
snippet ceil iA
ceil($1)$0
endsnippet

context math(context)
snippet nrm iA
norm($1 )
endsnippet

context math(context)
snippet inp iA
angle.l $1, $2 angle.r $0
endsnippet

context math(context)
snippet sq iA
sqrt($1)$0
endsnippet

context math(context)
snippet ge iA
>= $0
endsnippet

context math(context)
snippet le iA
<= $0
endsnippet

context math(context)
snippet lim wA
lim_($1 -> $2) $0
endsnippet

context math(context)
snippet mod iA
(mod $1) $0
endsnippet

context math(context)
snippet txt iA
\ \text{$1}\ $0
endsnippet

context math(context)
snippet cup iA
 union $0
endsnippet

context math(context)
snippet bcp iA
 union.big_($1)^($2) $0
endsnippet

context math(context)
snippet cap iA
 sect $0
endsnippet

context math(context)
snippet acp iA
 sect.big_($1)^($2) $0
endsnippet

context math(context)
snippet xx iA
 times $0
endsnippet

context math(context)
snippet nabl iA
 nabla $0
endsnippet

context math(context)
snippet star iA
 star $0
endsnippet

context math(context)
snippet det iA
det ($1 ) $0
endsnippet

context math(context)
snippet neq iA
 eq.not $0
endsnippet

context math(context)
snippet lor iA
\lor $0
endsnippet

context math(context)
snippet land iA
\land $0
endsnippet

context math(context)
snippet est iA
nothing $0
endsnippet

context math(context)
snippet to iA
-> $0
endsnippet

context math(context)
snippet equiv iA
 ident $0
endsnippet

context math(context)
snippet sim iA
 tilde $0
endsnippet

context math(context)
snippet opn iA
op("$1", limits: #${2:true}) $0
endsnippet

context math(context)
snippet eval iA
\Big|_{$1}^{$2}$0
endsnippet

context math(context)
snippet lsp iA
limsup_($1 -> $2) $0
endsnippet

context math(context)
snippet linm iA
liminf_($1 \to $2) $0
endsnippet

context math(context)
snippet pm iA
plus.minus $0
endsnippet

context math(context)
snippet EE iA
exists $0
endsnippet

context math(context)
snippet atn iA
\arctan $0
endsnippet

context math(context)
snippet widehat iA
\widehat{$1} $0
endsnippet

context math(context)
snippet `(as|sa|SA)` iA
_($1)
endsnippet

context math(context)
snippet `(wq|qw|QW)` iA
^($1)
endsnippet


context math(context)
snippet bar iA
overline($1) $0
endsnippet

context math(context)
snippet ... iA
dots.h.c $0
endsnippet

context math(context)
snippet not iA
\not $0
endsnippet

context math(context)
snippet ten iA
& \text{$1}$0
endsnippet

context math(context)
snippet pard iA
diff $0
endsnippet

context math(context)
snippet aleph iA
\aleph_{$1}$0
endsnippet

context math(context)
snippet rea iA
\Re $0
endsnippet

context math(context)
snippet ima iA
\Im $0
endsnippet

context math(context)
snippet max iA
max_($1)$0
endsnippet

context math(context)
snippet min iA
\min_($1)$0
endsnippet


context math(context)
snippet cc iA
{$1 \} $0
endsnippet

context math(context)
snippet stm iA
backslash $0
endsnippet

context math(context)
snippet circ iA
compose $0
endsnippet

context math(context)
snippet vec iA
\vec{$1} $0
endsnippet


context math(context)
snippet `([A-Za-z])(\d)` "auto superscript" wA
``rv= m[1]``^(``rv = m[2]``) $0
endsnippet

context math(context)
snippet inm iA
inf_($1) $0
endsnippet
context math(context)
snippet sp wA
sup_($1) $0
endsnippet

context text(context)
snippet beg "begin" bA
\begin{$1}
$0
\end{$1}
endsnippet

context text(context)
snippet ds "Display Math" Ab
$
    $1
$
$0
endsnippet

context math(context)
snippet @. iA
 dot.op $0
endsnippet

context math(context)
snippet `(@a|@A)` iA
alpha $0
endsnippet

context math(context)
snippet `(@b|@B)` iA
beta $0
endsnippet

context math(context)
snippet `(@c|@C)` iA
chi $0
endsnippet

context math(context)
snippet @d iA
delta $0
endsnippet

context math(context)
snippet `(@e|@E)` iA
epsilon $0
endsnippet

context math(context)
snippet @ve iA
varepsilon $0
endsnippet

context math(context)
snippet @f iA
phi $0
endsnippet

context math(context)
snippet @vf iA
varphi $0
endsnippet

context math(context)
snippet @g iA
gamma $0
endsnippet

context math(context)
snippet `(@h|@H)` iA
eta $0
endsnippet

context math(context)
snippet `(@i|@i)` iA
iota $0
endsnippet

context math(context)
snippet `(@k|@K)` iA
kappa $0
endsnippet

context math(context)
snippet @l iA
lambda $0
endsnippet

context math(context)
snippet `(@m|@M)` iA
mu $0
endsnippet

context math(context)
snippet `(@n|@N)` iA
nu $0
endsnippet

context math(context)
snippet @p iA
pi $0
endsnippet

context math(context)
snippet @P iA
pi $0
endsnippet

context math(context)
snippet @q iA
theta $0
endsnippet

context math(context)
snippet @vq iA
vartheta $0
endsnippet

context math(context)
snippet `(@r|@R)` iA
rho $0
endsnippet

context math(context)
snippet @s iA
sigma $0
endsnippet

context math(context)
snippet @vs iA
varsigma $0
endsnippet

context math(context)
snippet `(@t|@T)` iA
tau $0
endsnippet

context math(context)
snippet @u iA
upsilon $0
endsnippet

context math(context)
snippet @o iA
omega $0
endsnippet

context math(context)
snippet @O iA
Omega $0
endsnippet

context text(context)
snippet @& iA
wedge $0
endsnippet

context math(context)
snippet @x iA
xi $0
endsnippet

context math(context)
snippet @y iA
psi $0
endsnippet

context math(context)
snippet `(@z|@Z)` iA
zeta $0
endsnippet

context math(context)
snippet @D iA
Delta $0
endsnippet

context math(context)
snippet @F iA
Phi $0
endsnippet

context math(context)
snippet @G iA
Gamma $0
endsnippet

context math(context)
snippet @Q iA
Theta $0
endsnippet

context math(context)
snippet @L iA
Lambda $0
endsnippet

context math(context)
snippet @X iA
Xi $0
endsnippet

context math(context)
snippet @Y iA
Psi $0
endsnippet

context math(context)
snippet @S iA
Sigma $0
endsnippet

context math(context)
snippet @U iA
Upsilon $0
endsnippet

context math(context)
snippet @W iA
Omega $0
endsnippet

context math(context)
snippet `([\ pbvBV]) (\d)(\d)(.)([pbvBV])` "[G] Matrix" A
``
t = m[1] === ' ' ? '' : m[1]
n = 1
res = `\\begin{${t}matrix}`
res += m[5] == "b" ? "\n" : ''
for (let i = 0; i < m[2]; i++) {
	for (let j = 0; j < m[3]; j++) {
		res += `${snip.tabstop(n++)}`
		if (j + 1 != m[3]) {
			res += " & "
		} else {
			if (i + 1 != m[2]) {
				res += "\\\\\\\\"
			}
			res += m[5] == "b" ? "\n" : ''
		}
	}
}
res += `\\end{${t}matrix}`
rv = res
``
endsnippet



context math(context)
snippet `lr([\)\]\>\}vV])` "[G] Left-right" A
`` trans = {")": ["(", ")"], "]": ["[", "]"], ">": ["<", ">"], "}": ["{", "}"], "v": ["\\lvert", "\\rvert"], "V": ["\\lVert", "\\rVert"]}
rv = "\\left" + trans[m[1]][0] + " $1 " + "\\right" + trans[m[1]][1] ``
endsnippet

context math(context)
snippet `dd([A-Za-z])` iA
\frac{d}{d ``rv = m[1]``} $0
endsnippet

context math(context)
snippet `dd(\\[a-zA-Z]+) ` iA
\frac{d}{d ``rv = m[1]``} $0
endsnippet

context math(context)
snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction no ()" A
(``rv = m[1]``)/($1) $0
endsnippet


snippet @( iA
($1 ) $0
endsnippet

context math(context)
snippet @9 iA
($1 ) $0
endsnippet

context math(context)
snippet @[ iA
[ $1 ]$0
endsnippet

context math(context)
snippet @{ iA
\{ $1 \}$0
endsnippet

context math(context)
snippet `(pl|lp|Lp|LP|lP|pL|Pl|PL)` iA
+$0
endsnippet

context math(context)
snippet mca iA
cal($1)
endsnippet

context text(context)
snippet sd Aw
$
    $1
$
$0
endsnippet


context text(context)
snippet newl iA
\\\
\newline
$0
endsnippet

context text(context)
snippet tkxt A
\usepackage{pgfplots}
\pgfplotsset{width=10cm,compat=1.9}
\usepgfplotslibrary{external}
\tikzexternalize
endsnippet

context text(context)
snippet plot bA
\begin{center}
    \begin{tikzpicture}
        \begin{axis}[
        axis lines = left,
        xlabel = \(x\),
        ylabel = {\(f(x)\)},
        ]
        \addplot[domain =  $1:$2 , samples = 100, color=red,]{$3}
        node[below left, scale=1.5]{$ $4 $};
        \end{axis}
    \end{tikzpicture}
\end{center}
endsnippet

snippet addpl iA
\addplot[domain =  $1:$2 , samples = 100, color=red,]{$3}
        node[below left, scale=1.5]{$ $4 $};
endsnippet

context text(context)
snippet align wA
\begin{align*}
$0
\end{align*}
endsnippet

context math(context)
snippet !> iA
|-> $0
endsnippet

context math(context)
snippet `([A-Za-z]+)(N|R|Z|Q|C|A|H|O|S)(N|R|Z|Q|C|A|H|O|S)` iA
``rv = m[1]``: $1 \mathbb{``rv = m[2]``} \to \mathbb{``rv = m[3]``} $0
endsnippet

context math(context)
snippet `(\\[A-Za-z]+) (N|R|Z|Q|C|A|H|O|S)(N|R|Z|Q|C|A|H|O|S)` iA
``rv = m[1]``: $1 \mathbb{``rv = m[2]``} \to \mathbb{``rv = m[3]``} $0
endsnippet



context text(context)
snippet s.t. wA
such that $0
endsnippet

context text(context)
snippet FA wA
for all$0
endsnippet

context text(context)
snippet TE wA
there exists$0
endsnippet

context math(context)
snippet abs iA
abs($1) $0
endsnippet

context math(context)
snippet hat iA
hat($1) $0
endsnippet

context text(context)
snippet mo "inline math" bA
$$1 $2 $ $0
endsnippet


context text(context)
snippet om wA
$$1 $2 $ $0
endsnippet

context math(context)
snippet || iA
mid $0
endsnippet

context math(context)
snippet leq iA
\leq $0
endsnippet

context math(context)
snippet geq iA
\geq $0
endsnippet

context math(context)
snippet cong iA
 tilde.eqq $0
endsnippet

context math(context)
snippet sps iA
 supset.eq 
endsnippet

context math(context)
snippet ins iA
 in $0
endsnippet

context math(context)
snippet gg iA
 >> $0
endsnippet

context math(context)
snippet ll iA
 << $0
endsnippet

context math(context)
snippet apx iA
 approx $0
endsnippet

context math(context)
snippet seq iA
seq($1,$2) 
endsnippet
